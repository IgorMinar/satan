#!/usr/bin/env ruby

require 'time'
require 'uri'
require 'net/http'


class Integer
  def to_size
    byte_size = self.to_i
    if byte_size < 1024
      "#{byte_size}B"
    elsif byte_size < 1024*1024
      "#{sprintf('%0.2f', byte_size/1024.0)}KB"
    elsif byte_size < 1024*1024*1024
      "#{sprintf('%0.2f', byte_size/1024/1024.0)}MB"
    else
      "#{sprintf('%0.2f', byte_size/1024/1024/1024.0)}GB"
    end
  end
  def percent;self.to_i;end
  def byte; self.bytes; end
  def bytes; self.to_i; end
  def kilobyte; self.to_i * 1024; end
  def kilobytes; self.to_i * 1024; end
  def megabyte; self.megabytes; end
  def megabytes;self.to_i*1024*1024;end
  def gigabyte; self.gigabytes; end
  def gigabytes;self.to_i*1024*1024*1024;end
  def second;self.seconds;end
  def seconds;self.to_i;end
  def minute;self.minutes;end
  def minutes;self.to_i*60;end
  def hour;self.hours;end
  def hours;self.to_i*60*60;end
  def day;self.days;end
  def days;self.to_i*60*60*24;end
  def week;self.weeks;end
  def weeks;self.to_i*60*60*24*7;end
  def month;self.months;end
  def months;self.to_i*60*60*24*7*4;end
  def year;self.years;end
  def years;self.to_i*60*60*24*7*4*12;end
end


class WatchRule
  attr_accessor :name, :times, :daemon, :pid, :debug
  attr_reader :failures

  def violated
    @failures >= self.times
  end

  protected
  def passed(result)
    if (result)
      @failures += (@failures > 0 ? -1 : 0)
    else
      @failures += 1
      p "#{self.class}: #{self.message}"
    end
  end

  private
  def initialize
    @times = 1
    @failures = 0
  end
end


module SvcsParser

  def extract_pids
    lines = pids_for_fmri.split(/\n/)
    if [0,1].include? lines.length
      raise RuntimeException, "service {#{@fmri}} not found"
    else
      lines.shift
      lines.collect {|line| line.split(/\s+/)[2].to_i }
    end
  end

  def extract_pid(daemon = nil)
    lines = pids_for_fmri.split(/\n/)
    if [0,1].include? lines.length
      raise RuntimeException, "service {#{@fmri}} not found"
    else
      lines.shift
      while (lines.length > 0)
        words = lines.shift.split(/\s+/)
        ex_pid = words[2].to_i
        ex_daemon = words[3]

        if daemon.nil?
          return ex_pid
        elsif ex_daemon == self.daemon
          return ex_pid
        end
      end

      raise "no pid for service #{@fmri} was found"
    end
  end

  def pids_for_fmri
    `svcs -H -o FMRI -p #{@fmri}`
  end
end


class WatchedProcess
  include SvcsParser
  
  attr_accessor :daemon, :debug
  attr_reader :fmri, :pid, :rules

  def pid
    return @pid unless @pid.nil?

    @pid = extract_pid(self.daemon)
  end
  
  def condition(rule_name)
    if rule_name.kind_of? Class
      rule = rule_name.new
    else
      class_name = rule_name.to_s.split("_").map{|w| w.capitalize}.join() << 'Rule'
      klazz = Kernel.const_get(class_name)
      rule = klazz.new
    end
    
    rule.pid = self.pid
    rule.daemon = self.daemon
    rule.debug = self.debug
    yield rule
    
    p "Initialized #{rule.class}" if self.debug
    @rules << rule
  end

  private
  def initialize(service_fmri)
    @fmri = service_fmri
    @rules = Array.new
  end
end


class Satan
  include SvcsParser

  attr_accessor :name, :fmri, :interval, :debug, :safe_mode, :contact, :restart_grace
  attr_reader :procs
  
  def self.watch(&block)
    s = Satan.new
    yield s
    p "Satan is now watching #{s.fmri} and its pid(s): " + s.procs.collect{|p| p.pid}.join(',')
    loop do
      sleep s.interval
      s.procs.each do |p|
        p.rules.each do |r|
          r.test
          return s.send(:reap, p, r) if r.violated
        end
      end
    end
  end

  def kill_if(&block)
    proc = WatchedProcess.new(self.fmri)
    proc.debug = self.debug
    yield proc
    @procs << proc
  end

  private
  def initialize
    @procs = Array.new
  end

  def reap(proc, rule)
    p "Restarting service #{proc.fmri}"
    notify_admin(proc, rule, contact) unless contact.nil? or !contact.include?('@')
    unless safe_mode
      svcadm_restart(proc.fmri)
      sleep self.restart_grace
      pids = self.extract_pids.join(' ')
      p "Killing the following pids for service #{proc.fmri}: #{pids}"
      kill pids
    end
  end

  def notify_admin(proc, rule, contact)
    subject = "[SATAN] Restarted #{proc.fmri} on " + hostname
    message = "#{subject}\n\n"
    message << "Daemon:\t#{proc.daemon}\n" if proc.daemon
    message << "Rule:\t#{rule.class}"
    message << "\n#{rule.message}" if rule.respond_to? :message
    send_email(subject, message, contact)
  end

  def send_email(subject, message, address)
    `echo "#{message}" | mailx -s "#{subject}" #{address}`
  end

  def hostname
    `hostname`.strip
  end

  def svcadm_restart(fmri)
    `svcadm restart #{fmri}`
  end

  def kill(pids)
    `kill -9 #{pids}`
  end
end


module PsParser
  def ps_for_pid(pid)
    `ps -o pid,pcpu,rss,args -p #{pid}`
  end

  def ps(pid)
    out = ps_for_pid(pid).split(/\n/)[1].split(/ /).delete_if {|arg| arg == "" or arg.nil? }
    { :pid=>out[0].to_i, :cpu=>out[1].to_i, :rss=>out[2].to_i*1024, :command=>out[3..out.size].join(' ') }
  end
end


class CpuRule < WatchRule
  include PsParser
  attr_accessor :above

  def test
    @cpu = ps(self.pid)[:cpu]
    self.passed(@cpu < self.above)
  end

  def message
    "Cpu usage of the #{self.daemon} process above threshold of #{self.above}%. Was #{@cpu}%. Failure #{self.failures} of #{self.times}."
  end
end


class MemoryRule < WatchRule
  include PsParser
  attr_accessor :above

  def test
    @mem = ps(self.pid)[:rss]
    self.passed(@mem < self.above)
  end

  def message
    "Memory usage of the #{self.daemon} process above threshold of #{self.above.to_size}. Was #{@mem.to_size}. Failure #{self.failures} of #{self.times}."
  end
end


class HttpRule < WatchRule
  attr_accessor :uri, :timeout

  def test
    begin
        uri = URI.parse(self.uri)
        req = Net::HTTP::Get.new(self.uri)
        resp = Net::HTTP.new(uri.host,uri.port).start do |http|
          http.timeout = self.timeout if self.timeout
          http.request(req)
        end
        passed(resp.code.to_i == 200)
      rescue
        passed(false)
      end
  end

  def message
    "Http check for process #{self.daemon} failed. Failure #{self.failures} of #{self.times}."
  end
end


class JvmFreeHeapRule < WatchRule
  attr_accessor :below

  def jstat_gccapacity_for_pid(pid)
    `jstat -gccapacity #{pid} 0 1`
  end

  def og_max(pid)
    jstat_gccapacity_for_pid(pid).split(/\n/)[1].split(/\s+/)[7].to_i.kilobytes
  end

  def jstat_gc_for_pid(pid)
    `jstat -gc #{pid} 0 1`
  end

  def og_current(pid)
    jstat_gc_for_pid(pid).split(/\n/)[1].split(/\s+/)[7].to_i.kilobytes
  end

  def test
    @free_heap = og_max(self.pid) - og_current(self.pid)
    self.passed(@free_heap > self.below)
  end

  def message
    "Process #{self.daemon} below jvm free heap threshold of #{self.below.to_size}. Was #{@free_heap.to_size}. Failure #{self.failures} of #{self.times}."
  end
end


# main exec block
if $0 =~ /^(.*\/)?#{__FILE__}$/
  if ARGV[0].nil?
    p "usage: satan /path/to/satan.cfg"
    exit 1
  else
    load File.expand_path(ARGV[0])
  end
end